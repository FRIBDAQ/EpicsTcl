
<refentry>
    <refmeta>
        <refentrytitle>epics tcl package</refentrytitle>
        <manvolnum>3tcl</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>epics</refname>
        <refpurpose>
           Loadable package to access epics.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
            <command>
package require epics
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
            <command>
epicschannel <replaceable>name</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> get
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> set <replaceable>value</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> updatetime
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> delete
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> link <replaceable>tclVariableName</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> unlink <replaceable>tclVariableName</replaceable>
            </command>
        </cmdsynopsis>
	<cmdsynopsis>
           <command>   
<replaceable>name</replaceable> listlinks <replaceable>?pattern?</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
        	<command>
<replaceable>name</replaceable> values
			</command>
		</cmdsynopsis>	
    </refsynopsisdiv>

    <refsect1>
        <title>SUMMARY</title>
        <para>
            The epics package is a loadable package that supplies access to an epics control
            system.  Loading epics will also load the shared libraries required for epics, so these
            must be installed on the system on which this package is being used.
        </para>
        <para>
            The <command>epicschannel</command> command expresses an interest in a specific
            named channel, or database field.  Once specified, this becomes a new command.
            The new command is an ensemble with several subcommands.  These subcommands
            allow one to manipulate and inquire about the channel.  When interest is declared
            epics events are requested to maintain the state of a channel.  Epics events can
            only be processed, however, by entering the Tcl event loop.  Either by running wish,
            or by doing a <command>vwait</command> in a pure Tcl interpreter.
        </para>
        <para>
          It is perfectly possible and acceptable to do something like:
          <programlisting>
epicschannel aaa
...
epicschannel aaa
          </programlisting>
          Rather than creating a second, duplicate command, the epics package
          maintains a reference count for each distinct epics channel created.
          The first <command>epicschannel</command> in the example above
          creates the new command, with a reference count of 1.  The second
          increments the reference count of the existing aaa command to 2.
        </para>    
	<para>
          Having done the sequence of commands shown above;
          <programlisting>
aaa delete;       # Decrements the refcount to 1 aaa still exists.
...
aaa delete;       # refcount becomes 0 so aaa is deleted.
          </programlisting>
        </para>
        <para>
           Hopefully this reference count scheme will make large programs
           easier to build, as sections will not have to worry about other
           sections yanking existing commands out from underneath them.
        </para>
        <para>The subcommands for an epics channel are:
            <variablelist>
                <varlistentry>
                    <term><command>get</command></term>
                    <listitem>
                        <para>
                            Retrieves the value of the channel or field.  Note that if a
                            connection event has not yet been recieved and processed, this will
                            return an error.  This can happen either if the channel is not an
                            epics channel or if the event loop has not yet been entered enough
                            times to allow the event to be seen. Note that epics events are
                            processed prior to executing this command so it is possible for this
                            command to fail first and then work a few tries later.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>set</command> <replaceable>value</replaceable></term>
                    <listitem>
                        <para>
                            Sets the value of the channel or database field (if changeable) to
                            <replaceable>value</replaceable>.  All the remarks about the
                            <command>set</command> subcommand apply here too.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>updatetime</command></term>
                    <listitem>
                        <para>
                            Returns the time of the last update received for the channel.
                            The time is returned as an integer suitable for use in the
                            Tcl <command>clock</command> command.  This allows the result to
                            be formatted as a time and date, or used arithmetically to calculate
                            time diferences in seconds.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>delete</command></term>
                    <listitem>
                        <para>
                            Deletes the command and attachment to an epics channel. All resources
                            associated with the command are also destroyed.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>link</command> <replaceable>varname</replaceable></term>
                    <listitem>
                        <para>
                            Links a variable to the epics proces variable
                            (channel).  Changes to the channel get reflected
                            into the linked variable.  Changes to the varible
                            from Tcl scripts are traced and result in attempts
                            to modify the epics channel.
                        </para>
		        <para>
                            Additional <command>link</command>s are allowed and
                            create a 1 to many link between an epics channel
                            and several Tcl Variables.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
  	           <term><command>unlink <replaceable>varname</replaceable></command></term>
                    <listitem>
		       <para>
                           Removes the link between the epics channel and the 
                           Tcl variable <varname>varname</varname>.  It is an
                           error to attempt to unlink from a variable that is
                           not linked.
                       </para>
                    </listitem>
                </varlistentry>
	        <varlistentry>
		    <term><replaceable>name</replaceable> listlinks
		    <replaceable>?pattern?</replaceable></term>
                    <listitem>
		      <para>
                         Lists the set of links that match the optional
                         <parameter>pattern</parameter>.  If no pattern is
                         supplied, it defaults to *.
                      </para>
                    </listitem>
               </varlistentry>
               <varlistentry>
               	<term><replaceable>name</replaceable> values</term>
               	<listitem>
               		<para>
               			Lists the set of values that the process variable
               			can legally accept.  If this list is empty, the channel
               			is either not connected or has not received its first value
               			and therefore does not yet know its list of enumerated values.
               			If the list size is one, this will be a textual encoding of the
               			data types acceptable by the channel e.g.
               			<literal>float</literal>, <literal>string</literal> or
               			<literal>int</literal>.
               			If the list size is greater than 1, this is a list of allowed
               			values for the enumerated variable.
           			</para>
       			</listitem>
     		   </varlistentry>
            </variablelist>
        </para>
    </refsect1>
    <refsect1>
        <title>EXAMPLES</title>
        <para>
            The code below creates a label widget that follows the value of the epics channel
            SOMECHANNEL:
            <example>
                <title>Linking an epics channel to a Tcl variable</title>
            <programlisting>
package require epics
epicschannel SOMECHANNEL
SOMECHANNEL link SOMECHANNELvar
label .l -textvariable SOMECHANNELvar
pack .l
            </programlisting>
            </example>
        </para>
	<para>
           Note that this can be done much more simply using the epics Tcl
           widgets.  Those widgets understand how to display epics channels
           directly e.g.
           <programlisting>
package require epicsLabelWithUnits
controlwidget::epicsLabelWithUnits .l -channel SOMECHANNEL
pack .l
           </programlisting>
           Creates a GUI that displays SOMECHANNEL with its engineering units,
           updating as the value updates in Epics.
        </para>
    </refsect1>
    <refsect1>
        <title>OPEN ISSUES</title>
        <para>
            On some linux systems a broken implementation of the Linux
            Native Posix Thread Library (NPTL) causes the tcl shell extended with
            the epics package to deadlock (hang).  This is a known issue with Linux.
            If this is observed then prior to starting tcl/wish applications, select
            the LinuxThreads implementation of the threading library by (bash):
            <example>
                <title>Selecting the LinuxThreads thread library to prevent hangs</title>
            <para>
            <programlisting>
export LD_ASSUME_KERNEL=2.4.19
            </programlisting>
            For the C shell:
            <programlisting>
setenv LD_ASSUME_KERNEL 2.4.19
            </programlisting>
            </para>
            </example>
        </para>
    </refsect1>
</refentry>

