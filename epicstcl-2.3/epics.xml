
<refentry>
    <refmeta>
        <refentrytitle>epics tcl package</refentrytitle>
        <manvolnum>3tcl</manvolnum>
    </refmeta>
    <refnamediv>
        <refname>epics</refname>
        <refpurpose>
           Loadable package to access epics.
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <cmdsynopsis>
            <command>
package require epics
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
            <command>
epicschannel <replaceable>name</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> get ?count?
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> set <replaceable>value-list ?data-type?</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> updatetime
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> delete
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> link <replaceable>tclVariableName</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
             <command>
<replaceable>name</replaceable> unlink <replaceable>tclVariableName</replaceable>
            </command>
        </cmdsynopsis>
	<cmdsynopsis>
           <command>   
<replaceable>name</replaceable> listlinks <replaceable>?pattern?</replaceable>
            </command>
        </cmdsynopsis>
        <cmdsynopsis>
        	<command>
<replaceable>name</replaceable> values
			</command>
		</cmdsynopsis>	
		<cmdsynopsis>
		<command>
<replaceable>name</replaceable> size
		</command>
		</cmdsynopsis>
    </refsynopsisdiv>

    <refsect1>
        <title>SUMMARY</title>
        <para>
            The epics package is a loadable package that supplies access to an epics control
            system.  Loading epics will also load the shared libraries required for epics, so these
            must be installed on the system on which this package is being used.
        </para>
        <para>
            The <command>epicschannel</command> command expresses an interest in a specific
            named channel, or database field.  Once specified, this becomes a new command.
            The new command is an ensemble with several subcommands.  These subcommands
            allow one to manipulate and inquire about the channel.  When interest is declared
            epics events are requested to maintain the state of a channel.  Epics events can
            only be processed, however, by entering the Tcl event loop.  Either by running wish,
            or by doing a <command>vwait</command> in a pure Tcl interpreter.
        </para>
        <para>
          It is perfectly possible and acceptable to do something like:
          <programlisting>
epicschannel aaa
...
epicschannel aaa
          </programlisting>
          Rather than creating a second, duplicate command, the epics package
          maintains a reference count for each distinct epics channel created.
          The first <command>epicschannel</command> in the example above
          creates the new command, with a reference count of 1.  The second
          increments the reference count of the existing aaa command to 2.
        </para>    
	<para>
          Having done the sequence of commands shown above;
          <programlisting>
aaa delete;       # Decrements the refcount to 1 aaa still exists.
...
aaa delete;       # refcount becomes 0 so aaa is deleted.
          </programlisting>
        </para>
        <para>
           Hopefully this reference count scheme will make large programs
           easier to build, as sections will not have to worry about other
           sections yanking existing commands out from underneath them.
        </para>
        <para>The subcommands for an epics channel are:
            <variablelist>
                <varlistentry>
                    <term><command>get</command> <replaceable>?size?</replaceable></term>
                    <listitem>
                        <para>
                            Retrieves the value of the channel or field.  Note that if a
                            connection event has not yet been recieved and processed, this will
                            return an error.  This can happen either if the channel is not an
                            epics channel or if the event loop has not yet been entered enough
                            times to allow the event to be seen. Note that epics events are
                            processed prior to executing this command so it is possible for this
                            command to fail first and then work a few tries later.
                        </para>
                        <para>
                           If the channel is an array, the entire array is returned as a Tcl list
                           unless the optional <replaceable>size</replaceable> parameter is provided.
                           In that case, the first <replaceable>size</replaceable> elements are returned
                           or all elements depending on which is fewer.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>set</command> <replaceable>value-list ?data-type?</replaceable></term>
                    <listitem>
                        <para>
                            Sets the value of the channel or database field (if changeable) to
                            <replaceable>value-list</replaceable>.  All the remarks about the
                            <command>set</command> subcommand apply here too.
                        </para>
                        <para>
                           If the channel is an array, <replaceable>value-list</replaceable> is a list
                           of values that will be used to set the first elements of the array.
                           The number of elements set is the smaller of the size of the list and the
                           number of array elements managed by the channel.
                        </para>
                        <para>
                        	If the optional <replaceable>data-type</replaceable> keyword is present,
                        	it provides the data type to be used to do the set.  The data type can be
                        	any of <literal>string</literal> (default), <literal>real</literal> or
                        	<literal>int</literal>.  It is an error for <replaceable>value-list</replaceable>
                        	to contain a value that cannot be converted to the type specified.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>updatetime</command></term>
                    <listitem>
                        <para>
                            Returns the time of the last update received for the channel.
                            The time is returned as an integer suitable for use in the
                            Tcl <command>clock</command> command.  This allows the result to
                            be formatted as a time and date, or used arithmetically to calculate
                            time diferences in seconds.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>delete</command></term>
                    <listitem>
                        <para>
                            Deletes the command and attachment to an epics channel. All resources
                            associated with the command are also destroyed.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term><command>link</command> <replaceable>varname</replaceable></term>
                    <listitem>
                        <para>
                            Links a variable to the epics proces variable
                            (channel).  Changes to the channel get reflected
                            into the linked variable.  Changes to the varible
                            from Tcl scripts are traced and result in attempts
                            to modify the epics channel.
                        </para>
		        		<para>
                            Additional <command>link</command>s are allowed and
                            create a 1 to many link between an epics channel
                            and several Tcl Variables.
                        </para>
                        <para>
                        	At present, only the first element of array process variables
                        	is linked to the Tcl variable.  Array process variables must be
                        	handled via the <command>get</command> and <command>set</command>
                        	sub-commands.
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
  	           <term><command>unlink <replaceable>varname</replaceable></command></term>
                    <listitem>
		       <para>
                           Removes the link between the epics channel and the 
                           Tcl variable <varname>varname</varname>.  It is an
                           error to attempt to unlink from a variable that is
                           not linked.
                       </para>
                    </listitem>
                </varlistentry>
	        <varlistentry>
		    <term><replaceable>name</replaceable> listlinks
		    <replaceable>?pattern?</replaceable></term>
                    <listitem>
		      <para>
                         Lists the set of links that match the optional
                         <parameter>pattern</parameter>.  If no pattern is
                         supplied, it defaults to *.
                      </para>
                    </listitem>
               </varlistentry>
               <varlistentry>
               	<term><replaceable>name</replaceable> values</term>
               	<listitem>
               		<para>
               			Lists the set of values that the process variable
               			can legally accept.  If this list is empty, the channel
               			is either not connected or has not received its first value
               			and therefore does not yet know its list of enumerated values.
               			If the list size is one, this will be a textual encoding of the
               			data types acceptable by the channel e.g.
               			<literal>float</literal>, <literal>string</literal> or
               			<literal>int</literal>.
               			If the list size is greater than 1, this is a list of allowed
               			values for the enumerated variable.
           			</para>
       			</listitem>
     		   </varlistentry>
     		   <varlistentry>
     		   	<term><replaceable>name</replaceable> <command>size</command></term>
     		   	<listitem>
     		   		<para>
     		   			Returns the number of elements in <replaceable>name</replaceable>. 
     		   			Epics process variables can be thought of as arrays, where a scalar
     		   			value is just the special case of an array of size 1.
   		   			</para>
		   		 </listitem>
	   			</varlistentry>
            </variablelist>
        </para>
    </refsect1>
    <refsect1>
        <title>EXAMPLES</title>
        <para>
            The code below creates a label widget that follows the value of the epics channel
            SOMECHANNEL:
            <example>
                <title>Linking an epics channel to a Tcl variable</title>
            <programlisting>
package require epics
epicschannel SOMECHANNEL
SOMECHANNEL link SOMECHANNELvar
label .l -textvariable SOMECHANNELvar
pack .l
            </programlisting>
            </example>
        </para>
	<para>
           Note that this can be done much more simply using the epics Tcl
           widgets.  Those widgets understand how to display epics channels
           directly e.g.
           <programlisting>
package require epicsLabelWithUnits
controlwidget::epicsLabelWithUnits .l -channel SOMECHANNEL
pack .l
           </programlisting>
           Creates a GUI that displays SOMECHANNEL with its engineering units,
           updating as the value updates in Epics.
        </para>
        <para>
        	The example below finds out how many elements are in the
        	channel <literal>K5RGA_HSCAN_DAT</literal>
        </para>
        <programlisting>
package require epics
epicschannel K5RGA_HSCAN_DAT
&hellip;
set elements [K5RGA_HSCAN_DAT size]
		</programlisting>
		<para>
		   The following example, takes the channel K5RGA_HSCAN_DAT, already assumed
		   to be connected, and clears its second array element.
		   Note that the elements of Tcl lists number from 0.
		</para>
		<programlisting>
set data [K5RGA_HSCAN_DAT get 2];     # get elements 0,1.
set data [lreplace $data 1 1 0];      # Replace second item with 0.
K5RGA_HSCAN_DAT set $data;            # Set elements 0,1
		</programlisting>	
    </refsect1>
    <refsect1>
        <title>OPEN ISSUES</title>
        <para>
            On some linux systems a broken implementation of the Linux
            Native Posix Thread Library (NPTL) causes the tcl shell extended with
            the epics package to deadlock (hang).  This is a known issue with Linux.
            If this is observed then prior to starting tcl/wish applications, select
            the LinuxThreads implementation of the threading library by (bash):
            <example>
                <title>Selecting the LinuxThreads thread library to prevent hangs</title>
            <para>
            <programlisting>
export LD_ASSUME_KERNEL=2.4.19
            </programlisting>
            For the C shell:
            <programlisting>
setenv LD_ASSUME_KERNEL 2.4.19
            </programlisting>
            </para>
            </example>
        </para>
        <refsect2>
        <title>Issues with enumerated variable types</title>
        <para>
        	Enumerated types have an interesting interaction with array sets.
        	This is not an defect in the software package, it is simply a property
        	of Tcl that interacts with some enumerated types, and the ability to set
        	enumerated types by string values.  Consider an enumerated type whose string
        	values have spaces e.g one legitimate value is <literal>"a b"</literal>.
        	Let's call this process variable <literal>funky1</literal> (we will have
        	a <literal>funky2</literal> to show another interesting issue with enumerated process
        	variables. Suppose that this value <literal>"a b"</literal> corresponds to enumerated
        	index 0.  Consider the following two chunks of Tcl (<literal>funky1</literal> is already assumed
        	to be established as a channel).
        </para>
        <programlisting>
funky1 set [lindex [funky1 values] 0]
funky1 set "a b"
		</programlisting>
		<para>
			Both of these provide the parameter <literal>a b</literal> to the <command>set</command> subcommand.
			this looks like a two element list, but <literal>funky1</literal> is only a single element array,
			so the value <literal>a</literal> is set which may not be legal, in which case epics will throw an
			error or, even worse, may correspond to another legal value for the enumerated type.
		</para>
		<para>
			There are two potential solutions to this problem.  First, ensure that a single element list is 
			received by the <command>set</command> command, second, use indices only:
		</para>	
		<programlisting>
funky1 set [list [lindex [funky1 values] 0]]		
funky1 set [lsearch [funky1 values] "a "b] int
		</programlisting>
		<para>
			The <command>list</command> command will add an additional level of quoting if necessary
			to ensure that each parameter it recieves is a properly quoted list element.  The
			<command>lsearch</command> command will return the index of <literal>"a b"</literal>
			in the list of allowed values for <literal>funky1</literal>.  This is an integer that
			represents the enumerated index value.  The <literal>int</literal> at the back end of the
			command forces the <command>set</command> to be done as an integer data type rather
			than a string. See the discussion below about <firstterm>pathalogical</firstterm>
			enumerated process variables
		</para>
		<para>
			For enumerated process variables there can also be an interesting pathology.
			Consider a process variable <literal>funky2</literal> for which the
			<command>values</command> subcommand returns the list:
			<literal> 5 4 3 2 1 0</literal>.  It is not clear what the following does, or even
			what the intent is:
		</para>
		<programlisting>
funky2 set 2
		</programlisting>
		<para>
			Is the 2 the string 2 (which has enumerated index 3), or is it the index 2
			which has the string value 3?  Process variable designers should avoid such
			pathologies.  If, however, a pathology like this does exist, that would imply 
			that the only unambiguous way to set enumerated process variables is by
			index.  The following <emphasis>is</emphasis> unambiguous:
		</para>
		<programlisting>
funky2 set 2 int
         </programlisting>
         <para>
         	This forces an integer set of the process variable which selects
         	the textual value 3.  Note that this pathology may well be hidden from
         	the programmer, who is just using the <command>values</command> command
         	to get the list of legal values and selecting from amongst them.
         	The above discussion should hopefully lead you to conclude that
         	for enumerated epics variable types, you should probably only use the
         	textual representation, relying on the index to set the value and
         	ensuring that the index is treated as an index by using the <literal>int</literal>
         	data type parameter on the <command>set</command> sub command to ensure
         	that pathalogically labelled variables are not a problem. e.g:
       	</para>
       	<programlisting>
someenum set [lindex [someenum values] $index];  # Avoid this!!!
someenum set $index int;                         # use this instead.
       	</programlisting>
       	<para>
       		There is a further subtlety. For linked variables, modifications of the
       		variable triggers a set in <emphasis>string</emphasis> form.  This
       		avoids the vector/list issue, but steps right into the issue with
       		pathological value sets.  Therefore once more enumerated process variables,
       		following the plan of using the text (variable) for display only, but
       		use the <command><replaceable>someenum</replaceable> set <replaceable>some-integer</replaceable> int</command>
       		form for setting the variable is the best policy.
       	</para>
      	</refsect2>
    </refsect1>
</refentry>

