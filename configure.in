
# Process this file with autoconf to produce a configure script.
AC_INIT(Exception.cpp)
AC_CONFIG_AUX_DIR(config)
AM_CONFIG_HEADER(config.h)

#    Separate device libraries.

AM_INIT_AUTOMAKE(epicstcl, 1.3-003)  

#
#   The variable below should track the
#   version number above to ensure that
#   all the .so's get appropriately versioned:
#
SOVERSION="8:1"


#  Checks for parameters:

#  Compute the system type:
#  We can only build on linux-gnu  .. or darwin
#  We also have restrictions  on the versions for the drivers.
#


AC_MSG_CHECKING([operating system ])

AC_CANONICAL_HOST



if test "$host_os" == "linux-gnu"
then
   kernel_full_version="$(uname -r)"
   kernel_version="$(echo $kernel_full_version | cut -f1,2 -d.)"
   AC_MSG_RESULT([Building on $host_os kernel $kernel_version])  
   incsysdir="os/Linux"
   libsysdir="linux-x86"     # God help me if I need x64.
   binsysdir="linux-x86"
   OSLDFLAGS="-Wl,\"-rpath=$libdir\""
   SLIBEXT=".so"
   THREADFLAGS="-pthread -D_REENTRANT=1 -D_THREAD_SAFE=1"
elif test "$host_os" == "darwin8.9.0" 
then
   # God help me when the version changes:

   AC_MSG_RESULT([Building on MAC-OSX 8.9.0])
   incsysdir="os/Darwin"
   libsysdir="darwin-ppc"
   binsysdir="darwin-ppc"
   SLIBEXT=".dylib"
   THREADFLAGS="-D_REENTRANT=1 -D_THREAD_SAFE=1"
 
else
   AC_MSG_ERROR([This software can only be built on linux-gnu or darwin not $host_os])
fi



# Checks for programs.
AC_PROG_AWK
AC_PROG_CXX
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_LIBTOOL
AC_PROG_LN_S

# Documentation tools (docbook xmlto):

AC_PATH_PROG(HCDOCBOOK,  docbook2dvi,  echo)
AC_PATH_PROG(HTMLDOCBOOK, xmlto, echo)
AC_PATH_PROG(MANDOCBOOK,  xmlto,        echo)
AC_PATH_PROG(DVIPDF,       dvipdf,        echo)
MANDOCBOOK="$MANDOCBOOK man"

#

AC_PROG_GCC_TRADITIONAL

# Checks for libraries.


# Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(string.h)
AC_CHECK_HEADERS(malloc.h)
AC_CHECK_HEADERS(netdb.h)
AC_CHECK_HEADERS(netinet/in.h)
AC_CHECK_HEADERS(fcntl.h)
AC_CHECK_HEADERS(sys/ioctl.h)
AC_CHECK_HEADERS(sys/time.h)
AC_CHECK_HEADERS(arpa/inet.h)
AC_CHECK_HEADERS(sys/socket.h)
AC_CHECK_HEADERS(limits.h)
AC_CHECK_HEADERS(stddef.h)


AC_HEADER_MAJOR
AC_HEADER_SYS_WAIT
AC_HEADER_TIME
AC_HEADER_STAT
AC_PATH_XTRA

# Checks for typedefs, structures, and compiler characteristics.

AC_STRUCT_TM
AC_TYPE_SIZE_T
AC_TYPE_PID_T
AC_TYPE_OFF_T
AC_C_CONST
AC_C_INLINE



# Checks for library functions.

AC_FUNC_MMAP
AC_CHECK_FUNCS(stat)
AC_CHECK_FUNCS(malloc)
AC_CHECK_FUNCS(munmap)
AC_CHECK_FUNCS(getpagesize)
AC_CHECK_FUNCS(memset)
AC_CHECK_FUNCS(strerror)
AC_CHECK_FUNCS(gethostbyname)
AC_CHECK_FUNCS(gethostbyaddr)
AC_CHECK_FUNCS(inet_ntoa)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(select)
AC_CHECK_FUNCS(strchr)
AC_CHECK_FUNCS(gethostname)
AC_CHECK_FUNCS(getpass)
AC_CHECK_FUNCS(socket)
AC_CHECK_FUNCS(strdup)
AC_CHECK_FUNCS(strstr)
AC_CHECK_FUNCS(fork)
AC_CHECK_FUNCS(clock_gettime)
AC_CHECK_FUNCS(strtol)
AC_CHECK_FUNCS(strtoul)


#  See if the C runtime libs have .h's on them or
#  if h-less versions can be used for what we need:
#

AC_LANG_PUSH(C++)
AC_CHECK_HEADER(iostream, [AC_DEFINE([HAVE_HLESS_IOSTREAM],1,[<iostream> exists])],[])
AC_CHECK_HEADER(istream,  [AC_DEFINE([HAVE_HLESS_ISTREAM],1,[<istream> exists])],[])
AC_CHECK_HEADER(ostream,  [AC_DEFINE([HAVE_HLESS_OSTREAM],1,[<ostream> exists])],[])
AC_CHECK_HEADER(streambuf,[AC_DEFINE([HAVE_HLESS_STREAMBUF],1,[<streambuf> exists])],[])
AC_CHECK_HEADER(fstream,  [AC_DEFINE([HAVE_HLESS_FSTREAM],1,[<fstream> exists])],[])
AC_CHECK_HEADER(iomanip,  [AC_DEFINE([HAVE_HLESS_IOMANIP],1,[<iomanip> exists])],[])
AC_CHECK_HEADER(sstream,  [AC_DEFINE([HAVE_HLESS_SSTREAM],1,[<sstream> exists])],[])
AC_CHECK_HEADER(typeinfo, [AC_DEFINE([HAVE_HLESS_TYPEINFO],1,[<typeinfo> exists])],[])



#   Is there an std namespace to import from?

AC_COMPILE_IFELSE([using namespace std;], [AC_DEFINE([HAVE_STD_NAMESPACE],[1],[1 if std namespace defined])])
AH_VERBATIM([VHAVE_STD_NAMESPACE],[
/* Define STD macro according to HAVE_STD_NAMESPACE value */
#ifdef HAVE_STD_NAMESPACE
#define STD(name)  std::name
#else
#define STD(name) name
#endif])



AC_LANG_POP(C++)

# NSCL DAQ specific checks:



# Locate Tcl/Tk and setup compile/link switches for them too:
# The list below is the set of versions we will look for.  At this
# time, 8.4 is pretty standard and 8.5 is impending which means that
# soon some redhat systems will have it I suppose.
# This list must be updated as time goes by.
#
tcl_versions="8.5 8.4 8.3 8.2 8.1 8.0"     # First match;  so order new -> old.

#  The TCL Shell - used to run tests... must be in path.
#  First check for a version qualified command:
#

AC_MSG_CHECKING([for tcl shell command...])
for version in $tcl_versions
do
	name=tclsh${version}
	AC_CHECK_PROG(TCLSH_CMD, $name, $name)
done
#
#   Could be unqualified by version:
#
AC_CHECK_PROG(TCLSH_CMD, tclsh, tclsh)

if test "$TCLSH_CMD" == ""
then
	AC_MSG_ERROR([Can't find a tcl shell])
else
	AC_MSG_RESULT([found: $TCLSH_CMD])
fi

#  TCL headers:
#    We know of a few places the headers can live:
#       /opt/local/include        OS-X with darwin ports installed (preferred).
#       /usr/include              redhat linux.
#       /usr/include/tcl          debian dude that made  link to default tcl.
#       /usr/include/tcl<version> debian linux
#       /usr/local/include        default for source based install.
#       Whatever the user specifies. 
#        For now, the versions we look for are determined by the
#        variable tcl_versions  that variable is a list of version 
#        number specifiers.
#


tcl_header_dir=""
AC_MSG_CHECKING([for tcl headers])

AC_ARG_WITH(tcl-header-dir,
	[  --with-tcl-header-dir=path Path to tcl headers],
	[tcl_header_dir="$withval"
	tcl_headers_found="yes"],[tcl_headers_found="no"])


	# /opt/local/include
if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/opt/local/include/tcl.h],
	[tcl_header_dir="/opt/local/include"
	tcl_headers_found="yes"])
fi



	# /usr/include

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl.h],
	[tcl_header_dir="/usr/include"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl

if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/include/tcl/tcl.h],
	[tcl_header_dir="/usr/include/tcl"
	tcl_headers_found="yes"])
fi

	# /usr/include/tcl<version>

if test $tcl_headers_found == "no" ; then
 for version in $tcl_versions;  do
   if test $tcl_headers_found == "no" ; then   # stop at first match
      testdir=/usr/include/tcl$version
      AC_CHECK_FILE([${testdir}/tcl.h],
	[tcl_header_dir=${testdir}
	 tcl_headers_found="yes"])
   fi
 done
fi

      # /usr/local/include
if test $tcl_headers_found == "no"; then
   AC_CHECK_FILE([/usr/local/include/tcl.h],
	[tcl_header_dir="/usr/local/include/tcl"
	tcl_headers_found="yes"])
fi


if test $tcl_headers_found == "yes"; then
   TCL_FLAGS="-I${tcl_header_dir}"
   AC_MSG_RESULT([found in $tcl_header_dir])
else
   AC_MSG_ERROR([can't find tcl.h try using --with-tcl-header-dir to help me])
fi

#  Tcl libraries:
#     We look for the following:
#      /opt/local/lib/tclstub.a    - stubs lib for OS-X with darwin port install.
#      /usr/lib/lib/tclstub.a      -  Stubs library is there.
#      /usr/lib/libtcl.a           - Usually a link to a default lib.
#      /usr/lib/libtcl<version>.a  - version of tcl from tcl_versions
#      /usr/local/lib/libtcl.a     - As above but installed from source.
#      /usr/local/lib<version>.a   - As Above but installed from source.
#      If --with-tcl-libdir=dir      is supplied, that directory is 
#                                    searched first.
# ASSUMPTIONS:  libtcl and libtk will have the same naming conventions.
#

tcl_libsearchpath=""
tcl_libfound="no"
AC_MSG_CHECKING([Tcl/Tk library to use])

	# Does the user want us to look somewhere in particular:

AC_ARG_WITH(tcl-libdir,
	[  --with-tcl-libdir=dir Specify where the tcl libraries live.],
	[tcl_libsearchpath=$withval])

tcl_libsearchpath="$tcl_libsearchpath /opt/local/lib /usr/lib /usr/local/lib"

tcl_libfiles="libtclstub.a libtcl.a"

for v in ${tcl_versions}
do
   tcl_libfiles="$tcl_libfiles libtcl${v}.a"
   tcl_libfiles="$tcl_libfiles libtcl${v}.so"
   tcl_libfiles="$tcl_libfiles libtcl${v}.dylib"   # OS-X
done


for dir in ${tcl_libsearchpath} 
do
  for file in ${tcl_libfiles}
  do
    fname=$dir/$file
    if test $tcl_libfound == "no" 
    then
      AC_CHECK_FILE($fname,
	[tcl_libdir=$dir
         tcl_libname=$file
	 tcl_libfound="yes"
	])
    fi
  done
done

if test "$tcl_libfound" == "yes"
then

  # If the stubs library exists...we need todo a bit more stuff:

  if test "`basename $tcl_libname`" == "libtclstub.a"
  then
     AC_MSG_RESULT([tcl/tk libraries allow stubs enabling])
     TCL_FLAGS="$TCL_FLAGS -DUSE_TCL_STUBS"
     TCL_LDFLAGS="-L${tcl_libdir} -ltkstub -ltclstub"
  else
    # Find the lib basename:

      tcl_libname=$(echo $tcl_libname|cut -c 4- )  # trim off lib 
        #
	# Use basename to trim of the .a or .so:
	#

       tcl_libname=$(basename $(basename $(basename $tcl_libname .a) .so) .dylib)


       tk_libname=tk$(echo $tcl_libname|cut -c 4-)   # trim off tc...and use tk

       TCL_LDFLAGS="-L${tcl_libdir} -l${tk_libname}  -l${tcl_libname}"
  fi
else
  AC_MSG_ERROR([Unable to find the tcl library, help me out with --with-tcl-libdir])
fi


#  X11 libraries 

X11INCS="${X_CFLAGS}"
X11LIBS="${X_LIBS} ${X_EXTRA_LIBS} -lXm -lXt -lX11"


#
#   Look for epics in:
#    /usr/local/epics
#    /opt/epics
#    /soft/intel/epics   [nscl].
#    --with-epics-rootdir=
# Underneath that we have (we require intel linux remember):
#    include                  - the include directory
#    include/os/$incsysdir     - os specific includes.
#    lib/$libsysdir            - libs
#    bin/linux-x86/caRepeater - The caRepeater program.
#

epicstestdirs="/usr/local/epics /opt/epics /soft/intel/epics"
haveepics="no"

AC_MSG_CHECKING([ for epics includes, libs and binaries])

#  Check for --with-epics-rootdir....

AC_ARG_WITH(epics-rootdir,
	[  --with-epics-rootdir=top level directory of EPICS install],
	[haveepics="yes"
	 epicsroot="$withval"],
	[haveepics="no"])



if test $haveepics == "no"
then
   for dir in $epicstestdirs
   do
      if test $haveepics == "no"
      then
        AC_CHECK_FILE([${dir}/include/cadef.h],
	              [haveepics="yes"
                       epicsroot=$dir])
      fi
   done
fi

#  If we found epics we can build the software that needs it.
#  otherwise it's optional.

if test $haveepics == "yes"
then
	# Have epics:

   EPICSSOFTWARE="controlpush epicsdisplay chanlog" # Add these directories to build.
   EPICS_INCLUDES="-I$epicsroot/include -I$epicsroot/include/$incsysdir"
   EPICS_LDFLAGS="-L$epicsroot/lib/$libsysdir -lca"
   if test "$host_os" == "linux-gnu"
   then
      EPICS_LDFLAGS="$EPICS_LDFLAGS  -Wl,\"-rpath=$epicsroot/lib/$libsysdir\""
   fi
   EPICS_BIN="-DEPICS_BIN=\"\\\"$epicsroot/bin/$binsysdir\\\"\""
else
	# No epics.. provide blank variables:

   EPICSSOFTWARE=""	# no directories to add to make.
   EPICS_LDFLAGS=""	# No ldflags.	
   EPICS_INCLUDES=""	# No includes.
   EPICS_BIN=""
fi


#  We now look for cppunit.  This is needed to build c++ tests
#  If it is available, we'll define the following:
#  CPPUNIT   - Indicating to the Makefiles to enable building the tests.
#  CPPUNIT_INCLUDES - Any switches needed at compile time for cppunit.
#  CPPUNIT_LDFLAGS  - Any switches needed at link time for cppunit.
#
#

AC_ARG_ENABLE(cppunit,
		AS_HELP_STRING([--enable-cppunit],[build cppunit based tests]),
		[havecppunit="check"], [havecppunit="no"])

if test "$havecppunit" != "no" 
then
	AC_LANG_PUSH(C++)
	AC_MSG_CHECKING([for cppunit unit testing framework])

	AC_CHECK_HEADERS([cppunit/Test.h], [havecppunit="yes"], [havecppunit="no"])
	AC_MSG_RESULT([$havecppunit])
	if test "$havecppunit" == "yes"
	then
		CPPUNIT_INCLUDES=""
		CPPUNIT_LDFLAGS="-lcppunit"
		AC_SUBST(CPPUNIT_INCLUDES)
		AC_SUBST(CPPUNIT_LDFLAGS)
         fi
AC_LANG_POP(C++)
fi

AM_CONDITIONAL(CPPUNIT, test $havecppunit == "yes")

# define substitutions:

#  Go for a strict linguistic interpretation:

#       CXXFLAGS="-std=c++98 -pedantic"

#   someday:   AC_SUBST(CXXFLAGS)

AC_SUBST(OSLDFLAGS)
AC_SUBST(SLIBEXT)

	# EPICS if it exists.

AC_SUBST(EPICSSOFTWARE)
AC_SUBST(EPICS_LDFLAGS)
AC_SUBST(EPICS_INCLUDES)
AC_SUBST(EPICS_BIN)

	# tcl/tk

AC_SUBST(TCL_FLAGS)
AC_SUBST(TCL_LDFLAGS)
AC_SUBST(TCLSH_CMD)


	# X11: 

AC_SUBST(X11LIBS)
AC_SUBST(X11INCS)



# Documentation tools

AC_SUBST(HCDOCBOOK)
AC_SUBST(MANDOCBOOK)
AC_SUBST(HTMLDOCBOOK)
AC_SUBST(DVIPDF)


# Threading flags:

AC_SUBST(THREADFLAGS)

#  Create output files:

AC_OUTPUT(Makefile)