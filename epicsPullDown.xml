<refentry id="command_here">
  <refmeta>
     <refentrytitle>epicsPullDown</refentrytitle>
     <manvolnum>1tcl</manvolnum>
  </refmeta>
  <refnamediv>
     <refname>epicsPullDown</refname>
     <refpurpose>Pull down menu connected to an epics channel</refpurpose>
  </refnamediv>
  
  <refsynopsisdiv>
    <cmdsynopsis>
    <command>
package require epicsPullDown
    </command>
    </cmdsynopsis>
    <cmdsynopsis>
	<command>
controlwidget::epicsPulldown <replaceable>path ?options...?</replaceable>
	</command>
    </cmdsynopsis>
  </refsynopsisdiv>
  <refsect1>
     <title>DESCRIPTION</title>
     <para>
		The epicsPulldown widget provides a pull down menu that connects to 
		an epics channel.  The widget adapts a Tk menubutton widget and associates
		a menu with the widget.  The menu represents a set of possible values that
		can be set in the process variable connected to the widget.
     </para>
     <para>
     	While the widget can easily be used for process variables with enumerated
     	values it is not restricted to that use.  The menu button face is labeled
     	with the current value of the process variable.  If the process variable
     	has a value that is not represented by its menu choices the raw string
     	value of the process variable labels the button.
     </para>
  </refsect1>
  <refsect1>
     <title>
	OPTIONS
     </title>
     <para>
     	All options that are recognized by the Tk menubutton widget are supported.
     	The application, however should not use the <literal>-menu</literal> option
     	as that is used to connect the widget to the menu generated by the
     	<literal>-items</literal> option described in the list of additional options
     	below.
     </para>
     <para>
     	In addition to all of the menubutton widgets, the widget supports the following
     	options>
   	</para>
     <variablelist>
	<varlistentry>
	    <term><command>-channel</command> <replaceable>name</replaceable></term>
	    <listitem>
		<para>
			Specifies the name of the epics process variable to which the
			menu will be connected.  This option must be supplied when the
			widget is built and cannot be dynamically modified.  Selecting
			entries in the widget will modify the specified process variable.
			The button face will reflect the current value of the process
			variable.
		</para>
	    </listitem>
	</varlistentry>
	<varlistentry>
		<term><command>-items</command> <replaceable>items</replaceable></term>
		<listitem>
		<para>
			Describes the menu entries. The <replaceable>items</replaceable>
			value is a Tcl list.  Each list element describes a single item
			in the menu.  The menu is populated top down in the order specified
			by the <replaceable>items</replaceable> list.
		</para>
		<para>
			Each item in the list can have one of the following forms:
			<itemizedlist>
				<listitem>
					<para><litearl>-</litearl>  Inserts a separator in the menu.
						A separator is a horizontal line that is used to visually
						group related sets of items.
					</para>
				</listitem>
				<listitem>
					<para>
						<replaceable>labelvalue</replaceable> Inserts a radio button
						in the menu.  The radio button has the label given by
						the text <replaceable>labelvalue</replaceable>.  This will
						also be the value of the process variable associated with 
						this item. When the menu item created is selected, the
						process variable will be set to <replaceable>labelvalue</replaceable>.
						When the process variable is <replaceable>labelvalue</replaceable>
						the menu button will be labeled <replaceable>labelvalue</replaceable>.
					</para>
				</listitem>
				<listitem>
					<para>
						<replaceable>{label value}</replaceable> A two element Tcl
							list that creates a new radio button in the menu.
						    The first element (<replaceable>label</replaceable>)
						    provides the text that labels the button.  The second,
						    <replaceable>value</replaceable> provides the value 
						    associated with this label.  When this menu entry is
						    selected, the process variable will be set to 
						    <replaceable>value</replaceable>.  When the process
						    variable is equal to <replaceable>value</replaceable>
						    the label of the menu button will be <replaceable>label</replaceable>.
					    </para>
			    </listitem>
			</itemizedlist>
		</para>
		</listitem>
		</varlistentry>
		<varlistentry>
			<term><command>-tearoff</command> <literal> true | false</literal></term>
			<listitem>
				<para>
					Determines whether or not the pull down menu can be torn off into
					a new top level widget.  If <literal>true</literal> (the default),
					the menu can be torn off. If <literal>false</literal> not.
					Menus that can be torn off will have a dashed line across the
					top of them.  Clicking on that dashed line makes a new top level
					widget that duplicates the menu.  When the menu is torn off, you
					can still operate the menu button and, in fact, as many menu entries as
					desired can be torn off.
				</para>
			</listitem>
		</varlistentry>
     </variablelist>
  </refsect1>
  <refsect1>
     <title>METHODS</title>
 	 <para>
 	 	All of the widget commands of the Tk menubutton widget are supported.
 	</para>
  </refsect1>
  <refsect1>
     <title>EXAMPLES</title>
     <para>
     	The example below creates an epics pull down menu connected to 
     	IGLI0.  The first three menu items are values.  The fourth a
     	separator.  The final two are label value pairs:
     </para>
     <programlisting>
 package require epicsPullDown

controlwidget::epicsPullDown .pd -channel IGLI0 -tearoff true
.pd configure -items {1 2 3 - {four 4} {{five units} 5}}

pack .pd
     
     </programlisting>
     <para>
     	The epics <command>list</command> command can also be used to build up
     	the items list.  The next example produces the same result, but
     	uses <command>list</command> and defines the menu items
     	when the drop down is constructed.
   	</para>
   	<programlisting>
package require epicsPullDown

controlwidget::epicsPullDown .pd -channel IGLI0 \
								 -tearoff true  \
					-items [list 1 2 3 -        \
							 [list four 4]      \
							 [list "five units" 5]]
 

pack .pd
   	
   	</programlisting> 
  </refsect1>

</refentry>
